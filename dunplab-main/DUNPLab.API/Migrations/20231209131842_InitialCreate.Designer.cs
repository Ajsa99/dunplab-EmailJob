// <auto-generated />
using System;
using DUNPLab.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DUNPLab.API.Migrations
{
    [DbContext(typeof(DunpContext))]
    [Migration("20231209131842_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DUNPLab.API.Models.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojDokumenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumIstekaDokumenta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacijenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Adresa 1",
                            BrojDokumenta = "ABC123",
                            DatumIstekaDokumenta = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumRodjenja = new DateTime(1999, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ajsa.alibasic11@gmail.com",
                            Grad = "Grad 1",
                            Ime = "Ajsa",
                            JMBG = "1234567890123",
                            Pol = "Zenski",
                            Prezime = "Alibasic",
                            Telefon = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Adresa 2",
                            BrojDokumenta = "XYZ789",
                            DatumIstekaDokumenta = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumRodjenja = new DateTime(1999, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "softversko.i23m@gmail.com",
                            Grad = "Grad 2",
                            Ime = "Kristina",
                            JMBG = "9876543210123",
                            Pol = "Zenski",
                            Prezime = "Milentijevic",
                            Telefon = "987654321"
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Rezultat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSupstance")
                        .HasColumnType("int");

                    b.Property<int>("IdUzorka")
                        .HasColumnType("int");

                    b.Property<bool?>("JeLiUGranicama")
                        .HasColumnType("bit");

                    b.Property<double?>("Vrednost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdSupstance");

                    b.HasIndex("IdUzorka");

                    b.ToTable("Rezultati");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdSupstance = 1,
                            IdUzorka = 1,
                            JeLiUGranicama = true,
                            Vrednost = 85.0
                        },
                        new
                        {
                            Id = 2,
                            IdSupstance = 2,
                            IdUzorka = 2,
                            JeLiUGranicama = true,
                            Vrednost = 90.0
                        },
                        new
                        {
                            Id = 3,
                            IdSupstance = 3,
                            IdUzorka = 3,
                            JeLiUGranicama = false,
                            Vrednost = 140.0
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Supstanca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<double?>("DonjaGranica")
                        .HasColumnType("float");

                    b.Property<double?>("GornjaGranica")
                        .HasColumnType("float");

                    b.Property<string>("MetodTestiranja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oznaka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZahtevId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZahtevId");

                    b.ToTable("Supstance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cena = 150.0,
                            DonjaGranica = 12.0,
                            GornjaGranica = 17.5,
                            MetodTestiranja = "Laboratorijski",
                            Naziv = "Hemoglobin",
                            Opis = "Krv",
                            Oznaka = "Hb",
                            Tip = "Biološka"
                        },
                        new
                        {
                            Id = 2,
                            Cena = 120.0,
                            DonjaGranica = 70.0,
                            GornjaGranica = 100.0,
                            MetodTestiranja = "Laboratorijski",
                            Naziv = "Glukoza",
                            Opis = "šećer",
                            Oznaka = "Glu",
                            Tip = "Biološka"
                        },
                        new
                        {
                            Id = 3,
                            Cena = 180.0,
                            DonjaGranica = 70.0,
                            GornjaGranica = 200.0,
                            MetodTestiranja = "Laboratorijski",
                            Naziv = "Holesterol",
                            Opis = "holesterol",
                            Oznaka = "Hch",
                            Tip = "Biološka"
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Testiranje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojSobe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumVremeRezultata")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumVremeTestiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Izmenio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IzmenioDatumVreme")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("JesuLiPotvrdjeniSviUzorci")
                        .HasColumnType("bit");

                    b.Property<string>("NacinPlacanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestOdradio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UkupnaCena")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Testiranja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojSobe = "101",
                            DatumVremeRezultata = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7027),
                            DatumVremeTestiranja = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7017),
                            Izmenio = "Admin",
                            IzmenioDatumVreme = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7033),
                            JesuLiPotvrdjeniSviUzorci = true,
                            NacinPlacanja = "Kartica",
                            Naziv = "Opšti test",
                            Status = "Zavrseno",
                            TestOdradio = "Ajsa",
                            UkupnaCena = 450.0
                        },
                        new
                        {
                            Id = 2,
                            BrojSobe = "210",
                            DatumVremeRezultata = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7047),
                            DatumVremeTestiranja = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7042),
                            Izmenio = "Admin",
                            IzmenioDatumVreme = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7052),
                            JesuLiPotvrdjeniSviUzorci = false,
                            NacinPlacanja = "Gotovinsko",
                            Naziv = "Krvni pritisak",
                            Status = "U toku",
                            TestOdradio = "Kristina",
                            UkupnaCena = 250.0
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Cena")
                        .HasColumnType("float");

                    b.Property<int>("IdTestiranja")
                        .HasColumnType("int");

                    b.Property<string>("Izmenio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IzmenioDatumVreme")
                        .HasColumnType("datetime2");

                    b.Property<string>("KodEpruvete")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KonacanRezultat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kutija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodTestiranja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdTestiranja");

                    b.ToTable("Uzorci");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cena = 100.0,
                            IdTestiranja = 1,
                            Izmenio = "Ajsa",
                            IzmenioDatumVreme = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7117),
                            KodEpruvete = "KRV-001",
                            Komentar = "Nema komentara",
                            KonacanRezultat = "Negativan",
                            Kutija = "BX20",
                            MetodTestiranja = "Krvni pritisak",
                            Naziv = "Krv"
                        },
                        new
                        {
                            Id = 2,
                            Cena = 150.0,
                            IdTestiranja = 2,
                            Izmenio = "Kristina",
                            IzmenioDatumVreme = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7127),
                            KodEpruvete = "UZ-001",
                            Komentar = "Negativan rezultat",
                            KonacanRezultat = "Negativan",
                            Kutija = "BX21",
                            MetodTestiranja = "Opšti test",
                            Naziv = "Opšti uzorak"
                        },
                        new
                        {
                            Id = 3,
                            Cena = 100.0,
                            IdTestiranja = 2,
                            Izmenio = "Kristina",
                            IzmenioDatumVreme = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(7136),
                            KodEpruvete = "KRV-002",
                            Komentar = "Pozitivan rezultat",
                            KonacanRezultat = "Pozitivan",
                            Kutija = "BX22",
                            MetodTestiranja = "Krvni pritisak",
                            Naziv = "Krv"
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Zahtev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumTestiranja")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("JeLiObradjen")
                        .HasColumnType("bit");

                    b.Property<string>("Metode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int?>("TestiranjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TestiranjeId");

                    b.ToTable("Zahtev");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumTestiranja = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(6713),
                            JeLiObradjen = true,
                            Metode = "[\"Krv\"]",
                            PacijentId = 1,
                            TestiranjeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumTestiranja = new DateTime(2023, 12, 9, 14, 18, 41, 299, DateTimeKind.Local).AddTicks(6816),
                            JeLiObradjen = false,
                            Metode = "[\"Urin\",\"Krv\"]",
                            PacijentId = 2,
                            TestiranjeId = 2
                        });
                });

            modelBuilder.Entity("DUNPLab.API.Models.Rezultat", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Supstanca", "Supstanca")
                        .WithMany()
                        .HasForeignKey("IdSupstance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DUNPLab.API.Models.Uzorak", "Uzorak")
                        .WithMany("Rezultati")
                        .HasForeignKey("IdUzorka")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supstanca");

                    b.Navigation("Uzorak");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Supstanca", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Zahtev", null)
                        .WithMany("Supstance")
                        .HasForeignKey("ZahtevId");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Testiranje", "Testiranje")
                        .WithMany("Uzorci")
                        .HasForeignKey("IdTestiranja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Testiranje");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Zahtev", b =>
                {
                    b.HasOne("DUNPLab.API.Models.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId");

                    b.HasOne("DUNPLab.API.Models.Testiranje", "Testiranje")
                        .WithMany()
                        .HasForeignKey("TestiranjeId");

                    b.Navigation("Pacijent");

                    b.Navigation("Testiranje");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Testiranje", b =>
                {
                    b.Navigation("Uzorci");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Uzorak", b =>
                {
                    b.Navigation("Rezultati");
                });

            modelBuilder.Entity("DUNPLab.API.Models.Zahtev", b =>
                {
                    b.Navigation("Supstance");
                });
#pragma warning restore 612, 618
        }
    }
}
